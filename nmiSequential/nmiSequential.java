import java.util.*;

public class nmiSequential {
    public static void main(String[] args) {
        double[] gen1 = { 1.038691151045394f, 0.9717808328958838f, 0.9966030467793087f, 0.9613302210781676f,
                1.065966999131898f, 0.8887794204787932f, 0.964477933496281f, 0.9267374104768835f, 1.0048599436762296f,
                0.9788487417682588f, 0.9886894659659622f, 0.992979537646762f, 1.051870377881747f, 0.9839202977759315f,
                0.9577878347537729f, 0.9725738908715421f, 1.0001820003240034f, 0.9621973351304403f, 0.988869470484668f,
                1.0111356012034567f, 1.045658602766447f, 1.1171249331845932f, 0.9355821862705173f, 0.9189908827486618f,
                0.9361390570364824f, 0.9469548867441733f, 1.019220180173658f, 1.0465208442495657f, 1.0023752389924396f,
                0.9878932762728629f, 0.9096870180983968f, 0.9401329978434158f, 1.0395679079505216f, 1.0100117455623072f,
                0.9636110402554511f, 0.9749070240796708f, 0.9809222998640016f, 1.036594827149282f, 0.9770747682460582f,
                1.0092782730072491f, 1.020939578941138f, 1.0014459275009688f, 0.954879022864403f, 1.0767094822900973f,
                0.9768732535197359f, 0.9951099556440197f, 0.9428207620744464f, 1.0430648455208933f, 0.9202201833727743f,
                1.0757903430753177f, 0.9697048465844947f, 0.9853450518381083f, 0.9555658420069971f, 1.0992039505362101f,
                0.9255150005759051f, 0.988497293037111f, 1.0655914749130542f, 0.9013093785614574f, 1.0047793991954903f,
                0.9132977593467387f, 0.908165954507862f, 0.9632448221942537f, 1.0180238947311908f, 0.8929263106106959f,
                0.9742173766677369f, 1.032889412595098f, 0.9469018023656354f, 1.0591827310873776f, 0.9634698205871042f,
                1.0306469805170713f, 1.013890536339198f, 0.9927200655740556f, 0.8729572516090132f, 1.0578967117306166f,
                1.0392886675251407f, 0.9787113410493574f, 0.9707689731901965f, 1.006375196717188f, 1.038645345551047f,
                0.9628022039922345f, 0.9364541257816603f, 1.0753181524832938f, 0.9077999601363954f, 0.9572997179823522f,
                1.0208768730337823f, 1.0337229569300972f, 1.040430669843406f, 1.0740559350212024f, 0.9474714551640206f,
                0.948970049843105f, 1.013837652656275f, 1.0661101861518174f, 0.9949296323642839f, 1.0470436002552426f,
                0.9764895003880596f, 0.966814261521478f, 0.9020951614766969f, 0.9537021108540285f, 0.8847755748973185f,
                0.9866158264820581f, 1.0424731084667858f, 0.9807207528709997f, 1.0306248412373655f, 0.962268790977909f,
                1.001134681303082f, 0.9904077241336315f, 0.9866067680281776f, 1.0300169135368105f, 1.0849253109328094f,
                1.0100012212910254f, 1.050053799714612f, 0.9970338347220302f, 0.9529198148165037f, 0.9043253788380428f,
                1.0389012114841845f, 0.9375427779715715f, 0.9461140911680983f, 1.0085146152361195f, 1.01298987658649f,
                1.0378935803023785f, 1.0705701592574806f, 1.0722196230861267f, 1.0260744071759405f, 0.9458409220165549f,
                0.9776370501365724f, 1.0229005777969566f, 0.92752105830846f, 1.0419945109318884f, 0.9892915835966141f,
                0.9864859423923213f, 0.989832306559782f, 1.0098293915952556f, 0.9991520223775365f, 1.008014655571409f,
                0.9595172854077751f, 0.974737968488433f, 1.0035981437075632f, 0.9182025520271534f, 0.9323859420238171f,
                1.0189730265891728f, 0.9989352894733635f, 1.0333027655353537f, 0.9909652184953808f, 0.8518724069637353f,
                1.0274591040233392f, 1.0672897768335732f, 1.0738571030723363f, 0.9658397818627853f, 1.001519690037364f,
                0.989193100698106f, 1.0355877817330146f, 0.9425875335796564f, 1.1044980395494888f, 0.9485586996061678f,
                0.9699353898403217f, 1.03477542592975f, 0.8964857149857395f, 0.9735880771887796f, 1.006706249884073f,
                0.928886437868139f, 1.0267332931213864f, 1.0274765180086503f, 1.0172354296875505f, 0.9826160802200012f,
                0.9985931885599695f, 1.0626361164255032f, 0.9651540836347074f, 0.9905199394065837f, 0.9746876595402144f,
                1.0044594992702633f, 1.0634635415577567f, 0.866258991971862f, 1.0043408150704134f, 0.9960917419440948f,
                1.0867442790776125f, 1.0213995613027314f, 0.9412457351509788f, 0.9560352051228396f, 1.021451722437256f,
                1.100229453594642f, 1.0012408136687103f };
        double[] gen2 = { 0.27680999528817224f, 0.19688638467058384f, 0.21511397404396837f, 0.21409277315013664f,
                0.13815341645545956f, 0.1076342640746082f, 0.20577633116912797f, 0.1848052876624162f,
                0.297809510964134f, 0.029148624629943304f, 0.2563154013681561f, 0.1924633705628014f,
                0.32970468266573794f, 0.1878471141788472f, 0.18113496651822947f, 0.2929023364198752f,
                0.2875947921306381f, 0.25200326403851f, 0.22781462689280824f, 0.1509855934697853f, 0.13894020867720958f,
                0.3738871554821141f, 0.13626626072779244f, 0.17857531790007886f, 0.2264064110449428f,
                0.3217312610590412f, 0.38595562696683505f, 0.29090346515162274f, 0.12459555135136925f,
                0.17095368828491228f, 0.1898244437311117f, 0.22983650601460898f, 0.1780515735454452f,
                0.32328138796545525f, 0.20954680950183283f, 0.12229234650913022f, 0.3804154490049052f,
                0.2144622770219124f, 0.17492576215138647f, 0.05508055677986429f, 0.2469914918290736f,
                0.35727795767452736f, 0.1795891913650735f, 0.2515588452868495f, 0.19719088961084408f,
                0.17367582270200757f, 0.16105215445269444f, 0.10897157007736077f, 0.21522383333756423f,
                0.22123149340046924f, 0.21718403063978547f, 0.2106377213377734f, 0.16941811567988183f,
                0.21401225366246576f, 0.2790510426958803f, 0.16433169633328307f, 0.16993434120022433f,
                0.07698058217079892f, 0.2662890475850177f, 0.23982091138690317f, 0.20090307039039637f,
                0.2796913212358853f, 0.19139623094681546f, 0.10727755791205257f, 0.1796600338022143f,
                0.13681564003966892f, 0.24969757982457544f, 0.15387292537522043f, 0.16620124224074384f,
                0.10501253219802523f, 0.14521889309855965f, 0.14165368103319864f, 0.17119402328950853f,
                0.2240189155392967f, 0.21101803651594025f, 0.1636343257353438f, 0.15703224439880034f,
                0.3091437909176836f, 0.19583269718341895f, 0.20791444028326736f, 0.22815531854926435f,
                0.14027373368336135f, 0.22164873528382473f, 0.06700959077578034f, 0.20777826803878216f,
                0.17568033669129493f, 0.17058424932987387f, 0.31939047027387757f, 0.2860488051652653f,
                0.01687368521559679f, 0.20865301568560968f, 0.1881808263669234f, 0.262485854469609f,
                0.2418523174624128f, 0.17708939995604495f, 0.33422239141316523f, 0.21068210274755184f,
                0.1994905714302574f, 0.32189109526723847f, 0.21428951939638657f, 0.2983097233614803f,
                0.1821122597989112f, 0.25429972045837895f, 0.2661739068893491f, 0.19387795102262834f,
                0.3105283335287935f, 0.3269416429642904f, 0.2856429890728628f, 0.3185182632571749f,
                0.31280872485783173f, 0.15852051957090135f, 0.19775435886764126f, 0.22545469969181536f,
                0.16855133498738767f, 0.2420907119912301f, 0.3523034328132701f, 0.3100460886420486f,
                0.29655819439097675f, 0.3281123089357732f, 0.17503865337391905f, 0.3836374629756003f,
                0.169709564095363f, 0.17324183364981152f, 0.10037823789934418f, 0.208677846022325f, 0.2285956084651932f,
                0.1920239819931761f, 0.2128085262603888f, 0.22884265605731258f, 0.3020265441022797f,
                0.2566909904221739f, 0.2671370117176429f, 0.16867659045359565f, 0.2174670746458206f,
                0.2848361865421162f, 0.23368281047586498f, 0.3381594151051334f, 0.15703651891234377f,
                0.1730257390634247f, 0.2697101377346703f, 0.15204192933652816f, 0.05661256106508725f,
                0.333305177548142f, 0.29341924281049003f, 0.18914405779523374f, 0.24925224673108415f,
                0.2349864945962364f, 0.29993696868839914f, 0.21225771008843985f, 0.1851828132938518f,
                0.25277968034133935f, 0.2916051643178622f, 0.2918575786321963f, 0.2687722838314122f,
                0.10360477169920952f, 0.22733404453639589f, 0.15195007461340906f, 0.2945704102524957f,
                0.28399233567506643f, 0.19227248580628625f, 0.22390666907047718f, 0.4662882114072825f,
                0.158918367076563f, 0.3528536832022942f, -0.0006659819715403997f, 0.2945300918557506f,
                0.451634646152675f, 0.3690896180421946f, 0.1789916450090561f, 0.32926260685979f, 0.3105874776057007f,
                0.31130451721657837f, 0.19428993655687543f, 0.19478141157366496f, 0.2836839535100099f,
                0.3925066688966577f, 0.2740181746692857f, 0.23549418298214608f, 0.1543141811337931f,
                0.10406259962365931f, 0.20588619102556183f };

        System.out.println("NMI: " + calculationNMI(gen1, gen2, gen1.length));

    }

    public static float calculationNMI(double[] gen1, double[] gen2, int size) {
        float value = 0.0F;

        // Normalized arrays
        int[] gen1Normalized = new int[gen1.length];
        int[] gen2Normalized = new int[gen2.length];

        int maxVal = normalizedArray(gen1, gen1Normalized, gen1.length);
        normalizedArray(gen2, gen2Normalized, gen2.length);

        try {
            value = 2.0F * (float) calculateMutualInformation(gen1Normalized, gen2Normalized, size, maxVal)
                    / ((float) calculateEntropy(gen1, gen1Normalized, size)
                            + (float) calculateEntropy(gen2, gen2Normalized, size));
        } catch (Exception e) {
            System.out.println("Error");
            value = 0.0F;
        }
        return value;
    }

    public static double calculateMutualInformation(int[] gen1, int[] gen2, int size, int maxVal) {
        double LOG_BASE = 2.0D;

        double[] probMap = new double[8]; // 2 (gen1) + 2 (gen2) + 4 (joint)

        for (int iColumn = 0; iColumn < size; ++iColumn) {
            int valGen1Column = gen1[iColumn];
            int valGen2Column = gen2[iColumn];

            probMap[valGen1Column] = probMap[valGen1Column] + 1;

            probMap[valGen2Column + 2] = probMap[valGen2Column + 2] + 1;
            probMap[(valGen1Column + maxVal * valGen2Column)
                    + 4] = probMap[(valGen1Column + maxVal * valGen2Column) + 4] + 1;
        }

        for (int iCont = 0; iCont < 8; iCont++) {
            probMap[iCont] = probMap[iCont] / size;
        }

        double nMI = 0.0D;
        for (int iCont = 0; iCont < 4; iCont++) {
            if (probMap[iCont + 4] > 0.0D && probMap[iCont % maxVal] > 0.0D && probMap[(iCont / maxVal) + 2] > 0.0D) {
                nMI += probMap[iCont + 4]
                        * Math.log(probMap[iCont + 4] / probMap[iCont % maxVal] / probMap[(iCont / maxVal) + 2]);
            }
        }

        nMI /= Math.log(LOG_BASE);
        return nMI;

    }

    public static final int normalizedArray(double[] gen, int[] genNormalized, int size) {
        int maxValue = 0;
        if (size > 0) {
            int minValue = (int) Math.floor(gen[0]);
            maxValue = (int) Math.floor(gen[0]);

            for (int iCont = 0; iCont < size; ++iCont) {
                int iExp = (int) Math.floor(gen[iCont]);
                genNormalized[iCont] = iExp;
                if (iExp < minValue) {
                    minValue = iExp;
                }

                if (iExp > maxValue) {
                    maxValue = iExp;
                }
            }

            for (int iCont = 0; iCont < size; ++iCont) {
                genNormalized[iCont] -= minValue;
            }

            maxValue = maxValue - minValue + 1;
        }

        return maxValue;
    }

    public static double calculateEntropy(double[] gen, int[] genNormalized, int size) {
        double LOG_BASE = 2.0D;

        double[] probMap = new double[2];

        for (int iColumn = 0; iColumn < size; ++iColumn) {
            int iExpr = genNormalized[iColumn];
            probMap[iExpr] = probMap[iExpr] + 1;
        }

        for (int iCont = 0; iCont < 2; iCont++) {
            probMap[iCont] = probMap[iCont] / size;
        }

        double dEntropy = 0.0D;
        for (int iCont = 0; iCont < 2; iCont++) {
            Double varAux = probMap[iCont];
            if (varAux > 0.0D) {
                dEntropy -= varAux * Math.log(varAux);
            }
        }

        dEntropy /= Math.log(LOG_BASE);
        return dEntropy;
    }
}
